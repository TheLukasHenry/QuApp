/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTestResultInput,
  TestResult,
  UpdateSingleTestResultInput,
  UpdateTestResultInput,
} from '../models';
import {
    CreateTestResultInputFromJSON,
    CreateTestResultInputToJSON,
    TestResultFromJSON,
    TestResultToJSON,
    UpdateSingleTestResultInputFromJSON,
    UpdateSingleTestResultInputToJSON,
    UpdateTestResultInputFromJSON,
    UpdateTestResultInputToJSON,
} from '../models';

export interface TestResultsIdGetRequest {
    id: number;
}

export interface TestResultsPostRequest {
    createTestResultInput?: CreateTestResultInput;
}

export interface TestResultsPutRequest {
    updateTestResultInput?: UpdateTestResultInput;
}

export interface TestResultsUpdateSingleTestResultPutRequest {
    updateSingleTestResultInput?: UpdateSingleTestResultInput;
}

/**
 * 
 */
export class TestResultsApi extends runtime.BaseAPI {

    /**
     */
    async testResultsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestResult>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestResults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestResultFromJSON));
    }

    /**
     */
    async testResultsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestResult>> {
        const response = await this.testResultsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async testResultsIdGetRaw(requestParameters: TestResultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testResultsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestResults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultFromJSON(jsonValue));
    }

    /**
     */
    async testResultsIdGet(requestParameters: TestResultsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestResult> {
        const response = await this.testResultsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testResultsPostRaw(requestParameters: TestResultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestResults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTestResultInputToJSON(requestParameters.createTestResultInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultFromJSON(jsonValue));
    }

    /**
     */
    async testResultsPost(requestParameters: TestResultsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestResult> {
        const response = await this.testResultsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testResultsPutRaw(requestParameters: TestResultsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestResults`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTestResultInputToJSON(requestParameters.updateTestResultInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultFromJSON(jsonValue));
    }

    /**
     */
    async testResultsPut(requestParameters: TestResultsPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestResult> {
        const response = await this.testResultsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testResultsUpdateSingleTestResultPutRaw(requestParameters: TestResultsUpdateSingleTestResultPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestResults/UpdateSingleTestResult`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSingleTestResultInputToJSON(requestParameters.updateSingleTestResultInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultFromJSON(jsonValue));
    }

    /**
     */
    async testResultsUpdateSingleTestResultPut(requestParameters: TestResultsUpdateSingleTestResultPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestResult> {
        const response = await this.testResultsUpdateSingleTestResultPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
