/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTestCaseInput,
  TestCase,
  UpdateTestCaseInput,
} from '../models';
import {
    CreateTestCaseInputFromJSON,
    CreateTestCaseInputToJSON,
    TestCaseFromJSON,
    TestCaseToJSON,
    UpdateTestCaseInputFromJSON,
    UpdateTestCaseInputToJSON,
} from '../models';

export interface TestCasesFeatureFeatureIdGetRequest {
    featureId: number;
}

export interface TestCasesIdDeleteRequest {
    id: number;
}

export interface TestCasesIdGetRequest {
    id: number;
}

export interface TestCasesMovePostRequest {
    testCaseIdsList?: string;
    amountOfRowsToMove?: number;
}

export interface TestCasesPostRequest {
    createTestCaseInput?: CreateTestCaseInput;
}

export interface TestCasesPutRequest {
    updateTestCaseInput?: UpdateTestCaseInput;
}

export interface TestCasesUpdateOffsetPostRequest {
    operation?: string;
    testCaseIdList?: string;
}

export interface TestCasesUpdateTestCasesPutRequest {
    updateTestCaseInput?: Array<UpdateTestCaseInput>;
}

/**
 * 
 */
export class TestCasesApi extends runtime.BaseAPI {

    /**
     */
    async testCasesFeatureFeatureIdGetRaw(requestParameters: TestCasesFeatureFeatureIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestCase>>> {
        if (requestParameters.featureId === null || requestParameters.featureId === undefined) {
            throw new runtime.RequiredError('featureId','Required parameter requestParameters.featureId was null or undefined when calling testCasesFeatureFeatureIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases/feature/{featureId}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters.featureId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestCaseFromJSON));
    }

    /**
     */
    async testCasesFeatureFeatureIdGet(requestParameters: TestCasesFeatureFeatureIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestCase>> {
        const response = await this.testCasesFeatureFeatureIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testCasesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestCase>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestCaseFromJSON));
    }

    /**
     */
    async testCasesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestCase>> {
        const response = await this.testCasesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async testCasesIdDeleteRaw(requestParameters: TestCasesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testCasesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testCasesIdDelete(requestParameters: TestCasesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testCasesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testCasesIdGetRaw(requestParameters: TestCasesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCase>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testCasesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestCaseFromJSON(jsonValue));
    }

    /**
     */
    async testCasesIdGet(requestParameters: TestCasesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCase> {
        const response = await this.testCasesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testCasesMovePostRaw(requestParameters: TestCasesMovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.testCaseIdsList !== undefined) {
            queryParameters['testCaseIdsList'] = requestParameters.testCaseIdsList;
        }

        if (requestParameters.amountOfRowsToMove !== undefined) {
            queryParameters['amountOfRowsToMove'] = requestParameters.amountOfRowsToMove;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases/move`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testCasesMovePost(requestParameters: TestCasesMovePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testCasesMovePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testCasesPostRaw(requestParameters: TestCasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestCases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTestCaseInputToJSON(requestParameters.createTestCaseInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestCaseFromJSON(jsonValue));
    }

    /**
     */
    async testCasesPost(requestParameters: TestCasesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCase> {
        const response = await this.testCasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testCasesPutRaw(requestParameters: TestCasesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestCases`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTestCaseInputToJSON(requestParameters.updateTestCaseInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestCaseFromJSON(jsonValue));
    }

    /**
     */
    async testCasesPut(requestParameters: TestCasesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCase> {
        const response = await this.testCasesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testCasesUpdateOffsetPostRaw(requestParameters: TestCasesUpdateOffsetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.operation !== undefined) {
            queryParameters['operation'] = requestParameters.operation;
        }

        if (requestParameters.testCaseIdList !== undefined) {
            queryParameters['testCaseIdList'] = requestParameters.testCaseIdList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestCases/updateOffset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testCasesUpdateOffsetPost(requestParameters: TestCasesUpdateOffsetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testCasesUpdateOffsetPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testCasesUpdateTestCasesPutRaw(requestParameters: TestCasesUpdateTestCasesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestCases/updateTestCases`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateTestCaseInput.map(UpdateTestCaseInputToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testCasesUpdateTestCasesPut(requestParameters: TestCasesUpdateTestCasesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testCasesUpdateTestCasesPutRaw(requestParameters, initOverrides);
    }

}
