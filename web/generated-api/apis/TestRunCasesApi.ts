/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTestRunCaseInput,
  TestRunCase,
} from '../models';
import {
    CreateTestRunCaseInputFromJSON,
    CreateTestRunCaseInputToJSON,
    TestRunCaseFromJSON,
    TestRunCaseToJSON,
} from '../models';

export interface TestRunCasesIdDeleteRequest {
    id: number;
}

export interface TestRunCasesIdGetRequest {
    id: number;
}

export interface TestRunCasesIdPutRequest {
    id: number;
    testRunCase?: TestRunCase;
}

export interface TestRunCasesPostRequest {
    createTestRunCaseInput?: CreateTestRunCaseInput;
}

export interface TestRunCasesTestrunTestRunIdGetRequest {
    testRunId: number;
}

/**
 * 
 */
export class TestRunCasesApi extends runtime.BaseAPI {

    /**
     */
    async testRunCasesIdDeleteRaw(requestParameters: TestRunCasesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunCasesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRunCases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testRunCasesIdDelete(requestParameters: TestRunCasesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRunCasesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testRunCasesIdGetRaw(requestParameters: TestRunCasesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunCasesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRunCases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testRunCasesIdGet(requestParameters: TestRunCasesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRunCasesIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testRunCasesIdPutRaw(requestParameters: TestRunCasesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunCasesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestRunCases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TestRunCaseToJSON(requestParameters.testRunCase),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testRunCasesIdPut(requestParameters: TestRunCasesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRunCasesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testRunCasesPostRaw(requestParameters: TestRunCasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestRunCase>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestRunCases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTestRunCaseInputToJSON(requestParameters.createTestRunCaseInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestRunCaseFromJSON(jsonValue));
    }

    /**
     */
    async testRunCasesPost(requestParameters: TestRunCasesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestRunCase> {
        const response = await this.testRunCasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testRunCasesTestrunTestRunIdGetRaw(requestParameters: TestRunCasesTestrunTestRunIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.testRunId === null || requestParameters.testRunId === undefined) {
            throw new runtime.RequiredError('testRunId','Required parameter requestParameters.testRunId was null or undefined when calling testRunCasesTestrunTestRunIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRunCases/testrun/{testRunId}`.replace(`{${"testRunId"}}`, encodeURIComponent(String(requestParameters.testRunId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testRunCasesTestrunTestRunIdGet(requestParameters: TestRunCasesTestrunTestRunIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRunCasesTestrunTestRunIdGetRaw(requestParameters, initOverrides);
    }

}
