/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTestRunInput,
  TestRun,
} from '../models';
import {
    CreateTestRunInputFromJSON,
    CreateTestRunInputToJSON,
    TestRunFromJSON,
    TestRunToJSON,
} from '../models';

export interface TestRunsIdDeleteRequest {
    id: number;
}

export interface TestRunsIdGetRequest {
    id: number;
}

export interface TestRunsIdPutRequest {
    id: number;
    createTestRunInput?: CreateTestRunInput;
}

export interface TestRunsPostRequest {
    createTestRunInput?: CreateTestRunInput;
}

/**
 * 
 */
export class TestRunsApi extends runtime.BaseAPI {

    /**
     */
    async testRunsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestRun>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRuns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestRunFromJSON));
    }

    /**
     */
    async testRunsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestRun>> {
        const response = await this.testRunsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async testRunsIdDeleteRaw(requestParameters: TestRunsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRuns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async testRunsIdDelete(requestParameters: TestRunsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRunsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async testRunsIdGetRaw(requestParameters: TestRunsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestRun>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TestRuns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestRunFromJSON(jsonValue));
    }

    /**
     */
    async testRunsIdGet(requestParameters: TestRunsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestRun> {
        const response = await this.testRunsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testRunsIdPutRaw(requestParameters: TestRunsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestRun>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRunsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestRuns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTestRunInputToJSON(requestParameters.createTestRunInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestRunFromJSON(jsonValue));
    }

    /**
     */
    async testRunsIdPut(requestParameters: TestRunsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestRun> {
        const response = await this.testRunsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testRunsPostRaw(requestParameters: TestRunsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestRun>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TestRuns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTestRunInputToJSON(requestParameters.createTestRunInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestRunFromJSON(jsonValue));
    }

    /**
     */
    async testRunsPost(requestParameters: TestRunsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestRun> {
        const response = await this.testRunsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
