/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompanyUser,
} from '../models';
import {
    CompanyUserFromJSON,
    CompanyUserToJSON,
} from '../models';

export interface CompanyUsersCompanyCompanyIdGetRequest {
    companyId: number;
}

export interface CompanyUsersDeleteRequest {
    companyId?: number;
    userId?: number;
}

export interface CompanyUsersPostRequest {
    companyUser?: CompanyUser;
}

export interface CompanyUsersUserUserIdGetRequest {
    userId: number;
}

/**
 * 
 */
export class CompanyUsersApi extends runtime.BaseAPI {

    /**
     */
    async companyUsersCompanyCompanyIdGetRaw(requestParameters: CompanyUsersCompanyCompanyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyUser>>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling companyUsersCompanyCompanyIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CompanyUsers/company/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyUserFromJSON));
    }

    /**
     */
    async companyUsersCompanyCompanyIdGet(requestParameters: CompanyUsersCompanyCompanyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyUser>> {
        const response = await this.companyUsersCompanyCompanyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async companyUsersDeleteRaw(requestParameters: CompanyUsersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyUser>> {
        const queryParameters: any = {};

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CompanyUsers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyUserFromJSON(jsonValue));
    }

    /**
     */
    async companyUsersDelete(requestParameters: CompanyUsersDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyUser> {
        const response = await this.companyUsersDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async companyUsersPostRaw(requestParameters: CompanyUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/CompanyUsers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyUserToJSON(requestParameters.companyUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyUserFromJSON(jsonValue));
    }

    /**
     */
    async companyUsersPost(requestParameters: CompanyUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyUser> {
        const response = await this.companyUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async companyUsersUserUserIdGetRaw(requestParameters: CompanyUsersUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyUser>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling companyUsersUserUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CompanyUsers/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyUserFromJSON));
    }

    /**
     */
    async companyUsersUserUserIdGet(requestParameters: CompanyUsersUserUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyUser>> {
        const response = await this.companyUsersUserUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
