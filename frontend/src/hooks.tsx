/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "1.0"; 
export interface Company {
  companyID?: number;
  companyName?: string | null;
}

export interface CompanyUser {
  companyID?: number;
  userID?: number;
}

export interface CreateTestRunInput {
  testRunName?: string | null;
  testRunDate?: string;
  userID?: number;
  startTime?: string;
  endTime?: string;
  testRunStatus?: number;
}

export interface CreateUserInput {
  userName: string;
  email: string;
  password: string;
}

export interface Feature {
  featureID?: number;
  featureName: string;
  companyID: number;
}

export interface TestCase {
  testCaseID?: number;
  featureID?: number;
  testCaseName?: string | null;
  testCaseOrder?: number;
}

export interface TestRun {
  testRunID?: number;
  testRunName?: string | null;
  testRunDate?: string;
  userID?: number;
  startTime?: string;
  endTime?: string;
  testRunStatus?: number;
}

export interface TestRunCase {
  testRunCaseID?: number;
  testRunID?: number;
  testCaseID?: number;
  testCaseStatus?: number;
  testCaseComment?: string | null;
}

export interface UpdateUserInput {
  userName: string;
  email: string;
  password: string;
  userID?: number;
}

export interface User {
  userID?: number;
  userName?: string | null;
  email?: string | null;
  passwordHash?: string | null;
}

export interface WeatherForecast {
  date?: string;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | null;
}

export type CompaniesGETGetAllCompaniesProps = Omit<GetProps<Company[], unknown, void, void>, "path">;

export const CompaniesGETGetAllCompanies = (props: CompaniesGETGetAllCompaniesProps) => (
  <Get<Company[], unknown, void, void>
    path={`/Companies`}
    
    {...props}
  />
);

export type UseCompaniesGETGetAllCompaniesProps = Omit<UseGetProps<Company[], unknown, void, void>, "path">;

export const useCompaniesGETGetAllCompanies = (props: UseCompaniesGETGetAllCompaniesProps) => useGet<Company[], unknown, void, void>(`/Companies`, props);


export type CompaniesPOSTCreateCompanyProps = Omit<MutateProps<Company, unknown, void, Company, void>, "path" | "verb">;

export const CompaniesPOSTCreateCompany = (props: CompaniesPOSTCreateCompanyProps) => (
  <Mutate<Company, unknown, void, Company, void>
    verb="POST"
    path={`/Companies`}
    
    {...props}
  />
);

export type UseCompaniesPOSTCreateCompanyProps = Omit<UseMutateProps<Company, unknown, void, Company, void>, "path" | "verb">;

export const useCompaniesPOSTCreateCompany = (props: UseCompaniesPOSTCreateCompanyProps) => useMutate<Company, unknown, void, Company, void>("POST", `/Companies`, props);


export interface CompaniesGETGetCompanyPathParams {
  id: number
}

export type CompaniesGETGetCompanyProps = Omit<GetProps<Company, unknown, void, CompaniesGETGetCompanyPathParams>, "path"> & CompaniesGETGetCompanyPathParams;

export const CompaniesGETGetCompany = ({id, ...props}: CompaniesGETGetCompanyProps) => (
  <Get<Company, unknown, void, CompaniesGETGetCompanyPathParams>
    path={`/Companies/${id}`}
    
    {...props}
  />
);

export type UseCompaniesGETGetCompanyProps = Omit<UseGetProps<Company, unknown, void, CompaniesGETGetCompanyPathParams>, "path"> & CompaniesGETGetCompanyPathParams;

export const useCompaniesGETGetCompany = ({id, ...props}: UseCompaniesGETGetCompanyProps) => useGet<Company, unknown, void, CompaniesGETGetCompanyPathParams>((paramsInPath: CompaniesGETGetCompanyPathParams) => `/Companies/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface CompaniesPUTUpdateCompanyPathParams {
  id: number
}

export type CompaniesPUTUpdateCompanyProps = Omit<MutateProps<void, unknown, void, Company, CompaniesPUTUpdateCompanyPathParams>, "path" | "verb"> & CompaniesPUTUpdateCompanyPathParams;

export const CompaniesPUTUpdateCompany = ({id, ...props}: CompaniesPUTUpdateCompanyProps) => (
  <Mutate<void, unknown, void, Company, CompaniesPUTUpdateCompanyPathParams>
    verb="PUT"
    path={`/Companies/${id}`}
    
    {...props}
  />
);

export type UseCompaniesPUTUpdateCompanyProps = Omit<UseMutateProps<void, unknown, void, Company, CompaniesPUTUpdateCompanyPathParams>, "path" | "verb"> & CompaniesPUTUpdateCompanyPathParams;

export const useCompaniesPUTUpdateCompany = ({id, ...props}: UseCompaniesPUTUpdateCompanyProps) => useMutate<void, unknown, void, Company, CompaniesPUTUpdateCompanyPathParams>("PUT", (paramsInPath: CompaniesPUTUpdateCompanyPathParams) => `/Companies/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type CompaniesDELETEDeleteCompanyProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const CompaniesDELETEDeleteCompany = (props: CompaniesDELETEDeleteCompanyProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/Companies`}
    
    {...props}
  />
);

export type UseCompaniesDELETEDeleteCompanyProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useCompaniesDELETEDeleteCompany = (props: UseCompaniesDELETEDeleteCompanyProps) => useMutate<void, unknown, void, number, void>("DELETE", `/Companies`, {   ...props });


export type CompanyUsersPOSTAddCompanyUserProps = Omit<MutateProps<CompanyUser, unknown, void, CompanyUser, void>, "path" | "verb">;

export const CompanyUsersPOSTAddCompanyUser = (props: CompanyUsersPOSTAddCompanyUserProps) => (
  <Mutate<CompanyUser, unknown, void, CompanyUser, void>
    verb="POST"
    path={`/CompanyUsers`}
    
    {...props}
  />
);

export type UseCompanyUsersPOSTAddCompanyUserProps = Omit<UseMutateProps<CompanyUser, unknown, void, CompanyUser, void>, "path" | "verb">;

export const useCompanyUsersPOSTAddCompanyUser = (props: UseCompanyUsersPOSTAddCompanyUserProps) => useMutate<CompanyUser, unknown, void, CompanyUser, void>("POST", `/CompanyUsers`, props);


export interface CompanyUsersDELETERemoveCompanyUserQueryParams {
  companyId?: number;
  userId?: number;
}

export type CompanyUsersDELETERemoveCompanyUserProps = Omit<MutateProps<CompanyUser, unknown, CompanyUsersDELETERemoveCompanyUserQueryParams, void, void>, "path" | "verb">;

export const CompanyUsersDELETERemoveCompanyUser = (props: CompanyUsersDELETERemoveCompanyUserProps) => (
  <Mutate<CompanyUser, unknown, CompanyUsersDELETERemoveCompanyUserQueryParams, void, void>
    verb="DELETE"
    path={`/CompanyUsers`}
    
    {...props}
  />
);

export type UseCompanyUsersDELETERemoveCompanyUserProps = Omit<UseMutateProps<CompanyUser, unknown, CompanyUsersDELETERemoveCompanyUserQueryParams, void, void>, "path" | "verb">;

export const useCompanyUsersDELETERemoveCompanyUser = (props: UseCompanyUsersDELETERemoveCompanyUserProps) => useMutate<CompanyUser, unknown, CompanyUsersDELETERemoveCompanyUserQueryParams, void, void>("DELETE", `/CompanyUsers`, {   ...props });


export interface CompanyUsersGETGetCompanyUsersByCompanyIdPathParams {
  companyId: number
}

export type CompanyUsersGETGetCompanyUsersByCompanyIdProps = Omit<GetProps<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByCompanyIdPathParams>, "path"> & CompanyUsersGETGetCompanyUsersByCompanyIdPathParams;

export const CompanyUsersGETGetCompanyUsersByCompanyId = ({companyId, ...props}: CompanyUsersGETGetCompanyUsersByCompanyIdProps) => (
  <Get<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByCompanyIdPathParams>
    path={`/CompanyUsers/company/${companyId}`}
    
    {...props}
  />
);

export type UseCompanyUsersGETGetCompanyUsersByCompanyIdProps = Omit<UseGetProps<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByCompanyIdPathParams>, "path"> & CompanyUsersGETGetCompanyUsersByCompanyIdPathParams;

export const useCompanyUsersGETGetCompanyUsersByCompanyId = ({companyId, ...props}: UseCompanyUsersGETGetCompanyUsersByCompanyIdProps) => useGet<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByCompanyIdPathParams>((paramsInPath: CompanyUsersGETGetCompanyUsersByCompanyIdPathParams) => `/CompanyUsers/company/${paramsInPath.companyId}`, {  pathParams: { companyId }, ...props });


export interface CompanyUsersGETGetCompanyUsersByUserIdPathParams {
  userId: number
}

export type CompanyUsersGETGetCompanyUsersByUserIdProps = Omit<GetProps<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByUserIdPathParams>, "path"> & CompanyUsersGETGetCompanyUsersByUserIdPathParams;

export const CompanyUsersGETGetCompanyUsersByUserId = ({userId, ...props}: CompanyUsersGETGetCompanyUsersByUserIdProps) => (
  <Get<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByUserIdPathParams>
    path={`/CompanyUsers/user/${userId}`}
    
    {...props}
  />
);

export type UseCompanyUsersGETGetCompanyUsersByUserIdProps = Omit<UseGetProps<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByUserIdPathParams>, "path"> & CompanyUsersGETGetCompanyUsersByUserIdPathParams;

export const useCompanyUsersGETGetCompanyUsersByUserId = ({userId, ...props}: UseCompanyUsersGETGetCompanyUsersByUserIdProps) => useGet<CompanyUser[], unknown, void, CompanyUsersGETGetCompanyUsersByUserIdPathParams>((paramsInPath: CompanyUsersGETGetCompanyUsersByUserIdPathParams) => `/CompanyUsers/user/${paramsInPath.userId}`, {  pathParams: { userId }, ...props });


export type FeaturesPOSTCreateFeatureProps = Omit<MutateProps<Feature, unknown, void, Feature, void>, "path" | "verb">;

export const FeaturesPOSTCreateFeature = (props: FeaturesPOSTCreateFeatureProps) => (
  <Mutate<Feature, unknown, void, Feature, void>
    verb="POST"
    path={`/Features`}
    
    {...props}
  />
);

export type UseFeaturesPOSTCreateFeatureProps = Omit<UseMutateProps<Feature, unknown, void, Feature, void>, "path" | "verb">;

export const useFeaturesPOSTCreateFeature = (props: UseFeaturesPOSTCreateFeatureProps) => useMutate<Feature, unknown, void, Feature, void>("POST", `/Features`, props);


export type FeaturesGETGetAllFeaturesProps = Omit<GetProps<Feature[], unknown, void, void>, "path">;

export const FeaturesGETGetAllFeatures = (props: FeaturesGETGetAllFeaturesProps) => (
  <Get<Feature[], unknown, void, void>
    path={`/Features`}
    
    {...props}
  />
);

export type UseFeaturesGETGetAllFeaturesProps = Omit<UseGetProps<Feature[], unknown, void, void>, "path">;

export const useFeaturesGETGetAllFeatures = (props: UseFeaturesGETGetAllFeaturesProps) => useGet<Feature[], unknown, void, void>(`/Features`, props);


export type FeaturesPUTUpdateFeatureProps = Omit<MutateProps<Feature, unknown, void, Feature, void>, "path" | "verb">;

export const FeaturesPUTUpdateFeature = (props: FeaturesPUTUpdateFeatureProps) => (
  <Mutate<Feature, unknown, void, Feature, void>
    verb="PUT"
    path={`/Features`}
    
    {...props}
  />
);

export type UseFeaturesPUTUpdateFeatureProps = Omit<UseMutateProps<Feature, unknown, void, Feature, void>, "path" | "verb">;

export const useFeaturesPUTUpdateFeature = (props: UseFeaturesPUTUpdateFeatureProps) => useMutate<Feature, unknown, void, Feature, void>("PUT", `/Features`, props);


export interface FeaturesGETGetFeaturesByCompanyPathParams {
  companyId: number
}

export type FeaturesGETGetFeaturesByCompanyProps = Omit<GetProps<Feature[], unknown, void, FeaturesGETGetFeaturesByCompanyPathParams>, "path"> & FeaturesGETGetFeaturesByCompanyPathParams;

export const FeaturesGETGetFeaturesByCompany = ({companyId, ...props}: FeaturesGETGetFeaturesByCompanyProps) => (
  <Get<Feature[], unknown, void, FeaturesGETGetFeaturesByCompanyPathParams>
    path={`/Features/company/${companyId}`}
    
    {...props}
  />
);

export type UseFeaturesGETGetFeaturesByCompanyProps = Omit<UseGetProps<Feature[], unknown, void, FeaturesGETGetFeaturesByCompanyPathParams>, "path"> & FeaturesGETGetFeaturesByCompanyPathParams;

export const useFeaturesGETGetFeaturesByCompany = ({companyId, ...props}: UseFeaturesGETGetFeaturesByCompanyProps) => useGet<Feature[], unknown, void, FeaturesGETGetFeaturesByCompanyPathParams>((paramsInPath: FeaturesGETGetFeaturesByCompanyPathParams) => `/Features/company/${paramsInPath.companyId}`, {  pathParams: { companyId }, ...props });


export type FeaturesDELETEDeleteFeatureProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const FeaturesDELETEDeleteFeature = (props: FeaturesDELETEDeleteFeatureProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/Features`}
    
    {...props}
  />
);

export type UseFeaturesDELETEDeleteFeatureProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useFeaturesDELETEDeleteFeature = (props: UseFeaturesDELETEDeleteFeatureProps) => useMutate<void, unknown, void, number, void>("DELETE", `/Features`, {   ...props });


export type TestCasesPOSTCreateTestCaseProps = Omit<MutateProps<TestCase, unknown, void, TestCase, void>, "path" | "verb">;

export const TestCasesPOSTCreateTestCase = (props: TestCasesPOSTCreateTestCaseProps) => (
  <Mutate<TestCase, unknown, void, TestCase, void>
    verb="POST"
    path={`/TestCases`}
    
    {...props}
  />
);

export type UseTestCasesPOSTCreateTestCaseProps = Omit<UseMutateProps<TestCase, unknown, void, TestCase, void>, "path" | "verb">;

export const useTestCasesPOSTCreateTestCase = (props: UseTestCasesPOSTCreateTestCaseProps) => useMutate<TestCase, unknown, void, TestCase, void>("POST", `/TestCases`, props);


export type TestCasesGETGetAllTestCasesProps = Omit<GetProps<TestCase[], unknown, void, void>, "path">;

export const TestCasesGETGetAllTestCases = (props: TestCasesGETGetAllTestCasesProps) => (
  <Get<TestCase[], unknown, void, void>
    path={`/TestCases`}
    
    {...props}
  />
);

export type UseTestCasesGETGetAllTestCasesProps = Omit<UseGetProps<TestCase[], unknown, void, void>, "path">;

export const useTestCasesGETGetAllTestCases = (props: UseTestCasesGETGetAllTestCasesProps) => useGet<TestCase[], unknown, void, void>(`/TestCases`, props);


export interface TestCasesGETGetTestCaseByIdPathParams {
  id: number
}

export type TestCasesGETGetTestCaseByIdProps = Omit<GetProps<TestCase, unknown, void, TestCasesGETGetTestCaseByIdPathParams>, "path"> & TestCasesGETGetTestCaseByIdPathParams;

export const TestCasesGETGetTestCaseById = ({id, ...props}: TestCasesGETGetTestCaseByIdProps) => (
  <Get<TestCase, unknown, void, TestCasesGETGetTestCaseByIdPathParams>
    path={`/TestCases/${id}`}
    
    {...props}
  />
);

export type UseTestCasesGETGetTestCaseByIdProps = Omit<UseGetProps<TestCase, unknown, void, TestCasesGETGetTestCaseByIdPathParams>, "path"> & TestCasesGETGetTestCaseByIdPathParams;

export const useTestCasesGETGetTestCaseById = ({id, ...props}: UseTestCasesGETGetTestCaseByIdProps) => useGet<TestCase, unknown, void, TestCasesGETGetTestCaseByIdPathParams>((paramsInPath: TestCasesGETGetTestCaseByIdPathParams) => `/TestCases/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface TestCasesPUTUpdateTestCasePathParams {
  id: number
}

export type TestCasesPUTUpdateTestCaseProps = Omit<MutateProps<TestCase, unknown, void, TestCase, TestCasesPUTUpdateTestCasePathParams>, "path" | "verb"> & TestCasesPUTUpdateTestCasePathParams;

export const TestCasesPUTUpdateTestCase = ({id, ...props}: TestCasesPUTUpdateTestCaseProps) => (
  <Mutate<TestCase, unknown, void, TestCase, TestCasesPUTUpdateTestCasePathParams>
    verb="PUT"
    path={`/TestCases/${id}`}
    
    {...props}
  />
);

export type UseTestCasesPUTUpdateTestCaseProps = Omit<UseMutateProps<TestCase, unknown, void, TestCase, TestCasesPUTUpdateTestCasePathParams>, "path" | "verb"> & TestCasesPUTUpdateTestCasePathParams;

export const useTestCasesPUTUpdateTestCase = ({id, ...props}: UseTestCasesPUTUpdateTestCaseProps) => useMutate<TestCase, unknown, void, TestCase, TestCasesPUTUpdateTestCasePathParams>("PUT", (paramsInPath: TestCasesPUTUpdateTestCasePathParams) => `/TestCases/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type TestCasesDELETEDeleteTestCaseProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const TestCasesDELETEDeleteTestCase = (props: TestCasesDELETEDeleteTestCaseProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/TestCases`}
    
    {...props}
  />
);

export type UseTestCasesDELETEDeleteTestCaseProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useTestCasesDELETEDeleteTestCase = (props: UseTestCasesDELETEDeleteTestCaseProps) => useMutate<void, unknown, void, number, void>("DELETE", `/TestCases`, {   ...props });


export type TestRunCasesPOSTCreateTestRunCaseProps = Omit<MutateProps<void, unknown, void, TestRunCase, void>, "path" | "verb">;

export const TestRunCasesPOSTCreateTestRunCase = (props: TestRunCasesPOSTCreateTestRunCaseProps) => (
  <Mutate<void, unknown, void, TestRunCase, void>
    verb="POST"
    path={`/TestRunCases`}
    
    {...props}
  />
);

export type UseTestRunCasesPOSTCreateTestRunCaseProps = Omit<UseMutateProps<void, unknown, void, TestRunCase, void>, "path" | "verb">;

export const useTestRunCasesPOSTCreateTestRunCase = (props: UseTestRunCasesPOSTCreateTestRunCaseProps) => useMutate<void, unknown, void, TestRunCase, void>("POST", `/TestRunCases`, props);


export interface TestRunCasesGETGetTestRunCaseByIdPathParams {
  id: number
}

export type TestRunCasesGETGetTestRunCaseByIdProps = Omit<GetProps<void, unknown, void, TestRunCasesGETGetTestRunCaseByIdPathParams>, "path"> & TestRunCasesGETGetTestRunCaseByIdPathParams;

export const TestRunCasesGETGetTestRunCaseById = ({id, ...props}: TestRunCasesGETGetTestRunCaseByIdProps) => (
  <Get<void, unknown, void, TestRunCasesGETGetTestRunCaseByIdPathParams>
    path={`/TestRunCases/${id}`}
    
    {...props}
  />
);

export type UseTestRunCasesGETGetTestRunCaseByIdProps = Omit<UseGetProps<void, unknown, void, TestRunCasesGETGetTestRunCaseByIdPathParams>, "path"> & TestRunCasesGETGetTestRunCaseByIdPathParams;

export const useTestRunCasesGETGetTestRunCaseById = ({id, ...props}: UseTestRunCasesGETGetTestRunCaseByIdProps) => useGet<void, unknown, void, TestRunCasesGETGetTestRunCaseByIdPathParams>((paramsInPath: TestRunCasesGETGetTestRunCaseByIdPathParams) => `/TestRunCases/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface TestRunCasesPUTUpdateTestRunCasePathParams {
  id: number
}

export type TestRunCasesPUTUpdateTestRunCaseProps = Omit<MutateProps<void, unknown, void, TestRunCase, TestRunCasesPUTUpdateTestRunCasePathParams>, "path" | "verb"> & TestRunCasesPUTUpdateTestRunCasePathParams;

export const TestRunCasesPUTUpdateTestRunCase = ({id, ...props}: TestRunCasesPUTUpdateTestRunCaseProps) => (
  <Mutate<void, unknown, void, TestRunCase, TestRunCasesPUTUpdateTestRunCasePathParams>
    verb="PUT"
    path={`/TestRunCases/${id}`}
    
    {...props}
  />
);

export type UseTestRunCasesPUTUpdateTestRunCaseProps = Omit<UseMutateProps<void, unknown, void, TestRunCase, TestRunCasesPUTUpdateTestRunCasePathParams>, "path" | "verb"> & TestRunCasesPUTUpdateTestRunCasePathParams;

export const useTestRunCasesPUTUpdateTestRunCase = ({id, ...props}: UseTestRunCasesPUTUpdateTestRunCaseProps) => useMutate<void, unknown, void, TestRunCase, TestRunCasesPUTUpdateTestRunCasePathParams>("PUT", (paramsInPath: TestRunCasesPUTUpdateTestRunCasePathParams) => `/TestRunCases/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type TestRunCasesDELETEDeleteTestRunCaseProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const TestRunCasesDELETEDeleteTestRunCase = (props: TestRunCasesDELETEDeleteTestRunCaseProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/TestRunCases`}
    
    {...props}
  />
);

export type UseTestRunCasesDELETEDeleteTestRunCaseProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useTestRunCasesDELETEDeleteTestRunCase = (props: UseTestRunCasesDELETEDeleteTestRunCaseProps) => useMutate<void, unknown, void, number, void>("DELETE", `/TestRunCases`, {   ...props });


export interface TestRunCasesGETGetTestRunCasesByTestRunIDPathParams {
  testRunID: number
}

export type TestRunCasesGETGetTestRunCasesByTestRunIDProps = Omit<GetProps<void, unknown, void, TestRunCasesGETGetTestRunCasesByTestRunIDPathParams>, "path"> & TestRunCasesGETGetTestRunCasesByTestRunIDPathParams;

export const TestRunCasesGETGetTestRunCasesByTestRunID = ({testRunID, ...props}: TestRunCasesGETGetTestRunCasesByTestRunIDProps) => (
  <Get<void, unknown, void, TestRunCasesGETGetTestRunCasesByTestRunIDPathParams>
    path={`/TestRunCases/testrun/${testRunID}`}
    
    {...props}
  />
);

export type UseTestRunCasesGETGetTestRunCasesByTestRunIDProps = Omit<UseGetProps<void, unknown, void, TestRunCasesGETGetTestRunCasesByTestRunIDPathParams>, "path"> & TestRunCasesGETGetTestRunCasesByTestRunIDPathParams;

export const useTestRunCasesGETGetTestRunCasesByTestRunID = ({testRunID, ...props}: UseTestRunCasesGETGetTestRunCasesByTestRunIDProps) => useGet<void, unknown, void, TestRunCasesGETGetTestRunCasesByTestRunIDPathParams>((paramsInPath: TestRunCasesGETGetTestRunCasesByTestRunIDPathParams) => `/TestRunCases/testrun/${paramsInPath.testRunID}`, {  pathParams: { testRunID }, ...props });


export type TestRunsPOSTCreateTestRunProps = Omit<MutateProps<TestRun, unknown, void, CreateTestRunInput, void>, "path" | "verb">;

export const TestRunsPOSTCreateTestRun = (props: TestRunsPOSTCreateTestRunProps) => (
  <Mutate<TestRun, unknown, void, CreateTestRunInput, void>
    verb="POST"
    path={`/TestRuns`}
    
    {...props}
  />
);

export type UseTestRunsPOSTCreateTestRunProps = Omit<UseMutateProps<TestRun, unknown, void, CreateTestRunInput, void>, "path" | "verb">;

export const useTestRunsPOSTCreateTestRun = (props: UseTestRunsPOSTCreateTestRunProps) => useMutate<TestRun, unknown, void, CreateTestRunInput, void>("POST", `/TestRuns`, props);


export type TestRunsGETGetAllTestRunsProps = Omit<GetProps<TestRun[], unknown, void, void>, "path">;

export const TestRunsGETGetAllTestRuns = (props: TestRunsGETGetAllTestRunsProps) => (
  <Get<TestRun[], unknown, void, void>
    path={`/TestRuns`}
    
    {...props}
  />
);

export type UseTestRunsGETGetAllTestRunsProps = Omit<UseGetProps<TestRun[], unknown, void, void>, "path">;

export const useTestRunsGETGetAllTestRuns = (props: UseTestRunsGETGetAllTestRunsProps) => useGet<TestRun[], unknown, void, void>(`/TestRuns`, props);


export interface TestRunsGETGetTestRunByIdPathParams {
  testRunId: number
}

export type TestRunsGETGetTestRunByIdProps = Omit<GetProps<TestRun, unknown, void, TestRunsGETGetTestRunByIdPathParams>, "path"> & TestRunsGETGetTestRunByIdPathParams;

export const TestRunsGETGetTestRunById = ({testRunId, ...props}: TestRunsGETGetTestRunByIdProps) => (
  <Get<TestRun, unknown, void, TestRunsGETGetTestRunByIdPathParams>
    path={`/TestRuns/${testRunId}`}
    
    {...props}
  />
);

export type UseTestRunsGETGetTestRunByIdProps = Omit<UseGetProps<TestRun, unknown, void, TestRunsGETGetTestRunByIdPathParams>, "path"> & TestRunsGETGetTestRunByIdPathParams;

export const useTestRunsGETGetTestRunById = ({testRunId, ...props}: UseTestRunsGETGetTestRunByIdProps) => useGet<TestRun, unknown, void, TestRunsGETGetTestRunByIdPathParams>((paramsInPath: TestRunsGETGetTestRunByIdPathParams) => `/TestRuns/${paramsInPath.testRunId}`, {  pathParams: { testRunId }, ...props });


export interface TestRunsPUTUpdateTestRunPathParams {
  testRunId: number
}

export type TestRunsPUTUpdateTestRunProps = Omit<MutateProps<TestRun, unknown, void, CreateTestRunInput, TestRunsPUTUpdateTestRunPathParams>, "path" | "verb"> & TestRunsPUTUpdateTestRunPathParams;

export const TestRunsPUTUpdateTestRun = ({testRunId, ...props}: TestRunsPUTUpdateTestRunProps) => (
  <Mutate<TestRun, unknown, void, CreateTestRunInput, TestRunsPUTUpdateTestRunPathParams>
    verb="PUT"
    path={`/TestRuns/${testRunId}`}
    
    {...props}
  />
);

export type UseTestRunsPUTUpdateTestRunProps = Omit<UseMutateProps<TestRun, unknown, void, CreateTestRunInput, TestRunsPUTUpdateTestRunPathParams>, "path" | "verb"> & TestRunsPUTUpdateTestRunPathParams;

export const useTestRunsPUTUpdateTestRun = ({testRunId, ...props}: UseTestRunsPUTUpdateTestRunProps) => useMutate<TestRun, unknown, void, CreateTestRunInput, TestRunsPUTUpdateTestRunPathParams>("PUT", (paramsInPath: TestRunsPUTUpdateTestRunPathParams) => `/TestRuns/${paramsInPath.testRunId}`, {  pathParams: { testRunId }, ...props });


export type TestRunsDELETEDeleteTestRunProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const TestRunsDELETEDeleteTestRun = (props: TestRunsDELETEDeleteTestRunProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/TestRuns`}
    
    {...props}
  />
);

export type UseTestRunsDELETEDeleteTestRunProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useTestRunsDELETEDeleteTestRun = (props: UseTestRunsDELETEDeleteTestRunProps) => useMutate<void, unknown, void, number, void>("DELETE", `/TestRuns`, {   ...props });


export type UsersPOSTCreateUserProps = Omit<MutateProps<User, unknown, void, CreateUserInput, void>, "path" | "verb">;

export const UsersPOSTCreateUser = (props: UsersPOSTCreateUserProps) => (
  <Mutate<User, unknown, void, CreateUserInput, void>
    verb="POST"
    path={`/Users`}
    
    {...props}
  />
);

export type UseUsersPOSTCreateUserProps = Omit<UseMutateProps<User, unknown, void, CreateUserInput, void>, "path" | "verb">;

export const useUsersPOSTCreateUser = (props: UseUsersPOSTCreateUserProps) => useMutate<User, unknown, void, CreateUserInput, void>("POST", `/Users`, props);


export type UsersGETGetAllUsersProps = Omit<GetProps<User[], unknown, void, void>, "path">;

export const UsersGETGetAllUsers = (props: UsersGETGetAllUsersProps) => (
  <Get<User[], unknown, void, void>
    path={`/Users`}
    
    {...props}
  />
);

export type UseUsersGETGetAllUsersProps = Omit<UseGetProps<User[], unknown, void, void>, "path">;

export const useUsersGETGetAllUsers = (props: UseUsersGETGetAllUsersProps) => useGet<User[], unknown, void, void>(`/Users`, props);


export type UsersPUTUpdateUserProps = Omit<MutateProps<User, unknown, void, UpdateUserInput, void>, "path" | "verb">;

export const UsersPUTUpdateUser = (props: UsersPUTUpdateUserProps) => (
  <Mutate<User, unknown, void, UpdateUserInput, void>
    verb="PUT"
    path={`/Users`}
    
    {...props}
  />
);

export type UseUsersPUTUpdateUserProps = Omit<UseMutateProps<User, unknown, void, UpdateUserInput, void>, "path" | "verb">;

export const useUsersPUTUpdateUser = (props: UseUsersPUTUpdateUserProps) => useMutate<User, unknown, void, UpdateUserInput, void>("PUT", `/Users`, props);


export interface UsersGETGetUserByIdPathParams {
  id: number
}

export type UsersGETGetUserByIdProps = Omit<GetProps<User, unknown, void, UsersGETGetUserByIdPathParams>, "path"> & UsersGETGetUserByIdPathParams;

export const UsersGETGetUserById = ({id, ...props}: UsersGETGetUserByIdProps) => (
  <Get<User, unknown, void, UsersGETGetUserByIdPathParams>
    path={`/Users/${id}`}
    
    {...props}
  />
);

export type UseUsersGETGetUserByIdProps = Omit<UseGetProps<User, unknown, void, UsersGETGetUserByIdPathParams>, "path"> & UsersGETGetUserByIdPathParams;

export const useUsersGETGetUserById = ({id, ...props}: UseUsersGETGetUserByIdProps) => useGet<User, unknown, void, UsersGETGetUserByIdPathParams>((paramsInPath: UsersGETGetUserByIdPathParams) => `/Users/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type UsersDELETEDeleteUserProps = Omit<MutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const UsersDELETEDeleteUser = (props: UsersDELETEDeleteUserProps) => (
  <Mutate<void, unknown, void, number, void>
    verb="DELETE"
    path={`/Users`}
    
    {...props}
  />
);

export type UseUsersDELETEDeleteUserProps = Omit<UseMutateProps<void, unknown, void, number, void>, "path" | "verb">;

export const useUsersDELETEDeleteUser = (props: UseUsersDELETEDeleteUserProps) => useMutate<void, unknown, void, number, void>("DELETE", `/Users`, {   ...props });


export interface UsersGETGetUserByEmailPathParams {
  email: string
}

export type UsersGETGetUserByEmailProps = Omit<GetProps<User, unknown, void, UsersGETGetUserByEmailPathParams>, "path"> & UsersGETGetUserByEmailPathParams;

export const UsersGETGetUserByEmail = ({email, ...props}: UsersGETGetUserByEmailProps) => (
  <Get<User, unknown, void, UsersGETGetUserByEmailPathParams>
    path={`/Users/email/${email}`}
    
    {...props}
  />
);

export type UseUsersGETGetUserByEmailProps = Omit<UseGetProps<User, unknown, void, UsersGETGetUserByEmailPathParams>, "path"> & UsersGETGetUserByEmailPathParams;

export const useUsersGETGetUserByEmail = ({email, ...props}: UseUsersGETGetUserByEmailProps) => useGet<User, unknown, void, UsersGETGetUserByEmailPathParams>((paramsInPath: UsersGETGetUserByEmailPathParams) => `/Users/email/${paramsInPath.email}`, {  pathParams: { email }, ...props });


export type WeatherForecastGETGetProps = Omit<GetProps<WeatherForecast[], unknown, void, void>, "path">;

export const WeatherForecastGETGet = (props: WeatherForecastGETGetProps) => (
  <Get<WeatherForecast[], unknown, void, void>
    path={`/WeatherForecast`}
    
    {...props}
  />
);

export type UseWeatherForecastGETGetProps = Omit<UseGetProps<WeatherForecast[], unknown, void, void>, "path">;

export const useWeatherForecastGETGet = (props: UseWeatherForecastGETGetProps) => useGet<WeatherForecast[], unknown, void, void>(`/WeatherForecast`, props);

