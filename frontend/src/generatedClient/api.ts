/* tslint:disable */
/* eslint-disable */
/**
 * ServerC
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    'companyID'?: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'companyName'?: string | null;
}
/**
 * 
 * @export
 * @interface CompanyUser
 */
export interface CompanyUser {
    /**
     * 
     * @type {number}
     * @memberof CompanyUser
     */
    'companyID'?: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyUser
     */
    'userID'?: number;
}
/**
 * 
 * @export
 * @interface CreateTestRunInput
 */
export interface CreateTestRunInput {
    /**
     * 
     * @type {string}
     * @memberof CreateTestRunInput
     */
    'testRunName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateTestRunInput
     */
    'testRunDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTestRunInput
     */
    'userID'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTestRunInput
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTestRunInput
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTestRunInput
     */
    'testRunStatus'?: number;
}
/**
 * 
 * @export
 * @interface CreateUserInput
 */
export interface CreateUserInput {
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserInput
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * 
     * @type {number}
     * @memberof Feature
     */
    'featureID'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    'featureName': string;
    /**
     * 
     * @type {number}
     * @memberof Feature
     */
    'companyID': number;
}
/**
 * 
 * @export
 * @interface TestCase
 */
export interface TestCase {
    /**
     * 
     * @type {number}
     * @memberof TestCase
     */
    'testCaseID'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestCase
     */
    'featureID'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestCase
     */
    'testCaseName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TestCase
     */
    'testCaseOrder'?: number;
}
/**
 * 
 * @export
 * @interface TestRun
 */
export interface TestRun {
    /**
     * 
     * @type {number}
     * @memberof TestRun
     */
    'testRunID'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestRun
     */
    'testRunName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TestRun
     */
    'testRunDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof TestRun
     */
    'userID'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestRun
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestRun
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof TestRun
     */
    'testRunStatus'?: number;
}
/**
 * 
 * @export
 * @interface TestRunCase
 */
export interface TestRunCase {
    /**
     * 
     * @type {number}
     * @memberof TestRunCase
     */
    'testRunCaseID'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestRunCase
     */
    'testRunID'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestRunCase
     */
    'testCaseID'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestRunCase
     */
    'testCaseStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestRunCase
     */
    'testCaseComment'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateUserInput
 */
export interface UpdateUserInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserInput
     */
    'userID'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'userID'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesIdDelete', 'id', id)
            const localVarPath = `/Companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesIdGet', 'id', id)
            const localVarPath = `/Companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdPut: async (id: number, company?: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesIdPut', 'id', id)
            const localVarPath = `/Companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPost: async (company?: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(company, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesIdPut(id: number, company?: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesIdPut(id, company, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesPost(company?: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesPost(company, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesGet(options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.companiesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.companiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdGet(id: number, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesIdPut(id: number, company?: Company, options?: any): AxiosPromise<void> {
            return localVarFp.companiesIdPut(id, company, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Company} [company] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPost(company?: Company, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesPost(company, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesGet(options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesIdDelete(id: number, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesIdGet(id: number, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Company} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesIdPut(id: number, company?: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesIdPut(id, company, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Company} [company] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesPost(company?: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesPost(company, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyUsersApi - axios parameter creator
 * @export
 */
export const CompanyUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersCompanyCompanyIdGet: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companyUsersCompanyCompanyIdGet', 'companyId', companyId)
            const localVarPath = `/CompanyUsers/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [companyId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersDelete: async (companyId?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CompanyUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompanyUser} [companyUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersPost: async (companyUser?: CompanyUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CompanyUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersUserUserIdGet: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('companyUsersUserUserIdGet', 'userId', userId)
            const localVarPath = `/CompanyUsers/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyUsersApi - functional programming interface
 * @export
 */
export const CompanyUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUsersCompanyCompanyIdGet(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUsersCompanyCompanyIdGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [companyId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUsersDelete(companyId?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUsersDelete(companyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CompanyUser} [companyUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUsersPost(companyUser?: CompanyUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUsersPost(companyUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUsersUserUserIdGet(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUsersUserUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyUsersApi - factory interface
 * @export
 */
export const CompanyUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyUsersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersCompanyCompanyIdGet(companyId: number, options?: any): AxiosPromise<Array<CompanyUser>> {
            return localVarFp.companyUsersCompanyCompanyIdGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [companyId] 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersDelete(companyId?: number, userId?: number, options?: any): AxiosPromise<CompanyUser> {
            return localVarFp.companyUsersDelete(companyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompanyUser} [companyUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersPost(companyUser?: CompanyUser, options?: any): AxiosPromise<CompanyUser> {
            return localVarFp.companyUsersPost(companyUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUsersUserUserIdGet(userId: number, options?: any): AxiosPromise<Array<CompanyUser>> {
            return localVarFp.companyUsersUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyUsersApi - object-oriented interface
 * @export
 * @class CompanyUsersApi
 * @extends {BaseAPI}
 */
export class CompanyUsersApi extends BaseAPI {
    /**
     * 
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUsersApi
     */
    public companyUsersCompanyCompanyIdGet(companyId: number, options?: AxiosRequestConfig) {
        return CompanyUsersApiFp(this.configuration).companyUsersCompanyCompanyIdGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [companyId] 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUsersApi
     */
    public companyUsersDelete(companyId?: number, userId?: number, options?: AxiosRequestConfig) {
        return CompanyUsersApiFp(this.configuration).companyUsersDelete(companyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompanyUser} [companyUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUsersApi
     */
    public companyUsersPost(companyUser?: CompanyUser, options?: AxiosRequestConfig) {
        return CompanyUsersApiFp(this.configuration).companyUsersPost(companyUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUsersApi
     */
    public companyUsersUserUserIdGet(userId: number, options?: AxiosRequestConfig) {
        return CompanyUsersApiFp(this.configuration).companyUsersUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresCompanyCompanyIdGet: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('featuresCompanyCompanyIdGet', 'companyId', companyId)
            const localVarPath = `/Features/company/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdDelete: async (featureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('featuresFeatureIdDelete', 'featureId', featureId)
            const localVarPath = `/Features/{featureId}`
                .replace(`{${"featureId"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresPost: async (feature?: Feature, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feature, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresPut: async (feature?: Feature, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feature, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresCompanyCompanyIdGet(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresCompanyCompanyIdGet(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresFeatureIdDelete(featureId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresFeatureIdDelete(featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresPost(feature?: Feature, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresPost(feature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresPut(feature?: Feature, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresPut(feature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresCompanyCompanyIdGet(companyId: number, options?: any): AxiosPromise<Array<Feature>> {
            return localVarFp.featuresCompanyCompanyIdGet(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresFeatureIdDelete(featureId: number, options?: any): AxiosPromise<void> {
            return localVarFp.featuresFeatureIdDelete(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresGet(options?: any): AxiosPromise<Array<Feature>> {
            return localVarFp.featuresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresPost(feature?: Feature, options?: any): AxiosPromise<Feature> {
            return localVarFp.featuresPost(feature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Feature} [feature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresPut(feature?: Feature, options?: any): AxiosPromise<Feature> {
            return localVarFp.featuresPut(feature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * 
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresCompanyCompanyIdGet(companyId: number, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresCompanyCompanyIdGet(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} featureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresFeatureIdDelete(featureId: number, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresFeatureIdDelete(featureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresGet(options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Feature} [feature] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresPost(feature?: Feature, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresPost(feature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Feature} [feature] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public featuresPut(feature?: Feature, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).featuresPut(feature, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestCasesApi - axios parameter creator
 * @export
 */
export const TestCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TestCases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testCasesIdDelete', 'id', id)
            const localVarPath = `/TestCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testCasesIdGet', 'id', id)
            const localVarPath = `/TestCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdPut: async (id: number, testCase?: TestCase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testCasesIdPut', 'id', id)
            const localVarPath = `/TestCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesPost: async (testCase?: TestCase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TestCases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestCasesApi - functional programming interface
 * @export
 */
export const TestCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestCase>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCasesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCasesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCasesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasesIdPut(id: number, testCase?: TestCase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCasesIdPut(id, testCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasesPost(testCase?: TestCase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCasesPost(testCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestCasesApi - factory interface
 * @export
 */
export const TestCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesGet(options?: any): AxiosPromise<Array<TestCase>> {
            return localVarFp.testCasesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.testCasesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdGet(id: number, options?: any): AxiosPromise<TestCase> {
            return localVarFp.testCasesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesIdPut(id: number, testCase?: TestCase, options?: any): AxiosPromise<TestCase> {
            return localVarFp.testCasesIdPut(id, testCase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestCase} [testCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasesPost(testCase?: TestCase, options?: any): AxiosPromise<TestCase> {
            return localVarFp.testCasesPost(testCase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestCasesApi - object-oriented interface
 * @export
 * @class TestCasesApi
 * @extends {BaseAPI}
 */
export class TestCasesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCasesApi
     */
    public testCasesGet(options?: AxiosRequestConfig) {
        return TestCasesApiFp(this.configuration).testCasesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCasesApi
     */
    public testCasesIdDelete(id: number, options?: AxiosRequestConfig) {
        return TestCasesApiFp(this.configuration).testCasesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCasesApi
     */
    public testCasesIdGet(id: number, options?: AxiosRequestConfig) {
        return TestCasesApiFp(this.configuration).testCasesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TestCase} [testCase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCasesApi
     */
    public testCasesIdPut(id: number, testCase?: TestCase, options?: AxiosRequestConfig) {
        return TestCasesApiFp(this.configuration).testCasesIdPut(id, testCase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestCase} [testCase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCasesApi
     */
    public testCasesPost(testCase?: TestCase, options?: AxiosRequestConfig) {
        return TestCasesApiFp(this.configuration).testCasesPost(testCase, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestRunCasesApi - axios parameter creator
 * @export
 */
export const TestRunCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testRunCasesIdDelete', 'id', id)
            const localVarPath = `/TestRunCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testRunCasesIdGet', 'id', id)
            const localVarPath = `/TestRunCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdPut: async (id: number, testRunCase?: TestRunCase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testRunCasesIdPut', 'id', id)
            const localVarPath = `/TestRunCases/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testRunCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesPost: async (testRunCase?: TestRunCase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TestRunCases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testRunCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} testRunID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesTestrunTestRunIDGet: async (testRunID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testRunID' is not null or undefined
            assertParamExists('testRunCasesTestrunTestRunIDGet', 'testRunID', testRunID)
            const localVarPath = `/TestRunCases/testrun/{testRunID}`
                .replace(`{${"testRunID"}}`, encodeURIComponent(String(testRunID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestRunCasesApi - functional programming interface
 * @export
 */
export const TestRunCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestRunCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunCasesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunCasesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunCasesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunCasesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunCasesIdPut(id: number, testRunCase?: TestRunCase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunCasesIdPut(id, testRunCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunCasesPost(testRunCase?: TestRunCase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunCasesPost(testRunCase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} testRunID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunCasesTestrunTestRunIDGet(testRunID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunCasesTestrunTestRunIDGet(testRunID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestRunCasesApi - factory interface
 * @export
 */
export const TestRunCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestRunCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.testRunCasesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.testRunCasesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesIdPut(id: number, testRunCase?: TestRunCase, options?: any): AxiosPromise<void> {
            return localVarFp.testRunCasesIdPut(id, testRunCase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestRunCase} [testRunCase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesPost(testRunCase?: TestRunCase, options?: any): AxiosPromise<void> {
            return localVarFp.testRunCasesPost(testRunCase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} testRunID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunCasesTestrunTestRunIDGet(testRunID: number, options?: any): AxiosPromise<void> {
            return localVarFp.testRunCasesTestrunTestRunIDGet(testRunID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestRunCasesApi - object-oriented interface
 * @export
 * @class TestRunCasesApi
 * @extends {BaseAPI}
 */
export class TestRunCasesApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunCasesApi
     */
    public testRunCasesIdDelete(id: number, options?: AxiosRequestConfig) {
        return TestRunCasesApiFp(this.configuration).testRunCasesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunCasesApi
     */
    public testRunCasesIdGet(id: number, options?: AxiosRequestConfig) {
        return TestRunCasesApiFp(this.configuration).testRunCasesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TestRunCase} [testRunCase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunCasesApi
     */
    public testRunCasesIdPut(id: number, testRunCase?: TestRunCase, options?: AxiosRequestConfig) {
        return TestRunCasesApiFp(this.configuration).testRunCasesIdPut(id, testRunCase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestRunCase} [testRunCase] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunCasesApi
     */
    public testRunCasesPost(testRunCase?: TestRunCase, options?: AxiosRequestConfig) {
        return TestRunCasesApiFp(this.configuration).testRunCasesPost(testRunCase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} testRunID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunCasesApi
     */
    public testRunCasesTestrunTestRunIDGet(testRunID: number, options?: AxiosRequestConfig) {
        return TestRunCasesApiFp(this.configuration).testRunCasesTestrunTestRunIDGet(testRunID, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestRunsApi - axios parameter creator
 * @export
 */
export const TestRunsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TestRuns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsPost: async (createTestRunInput?: CreateTestRunInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TestRuns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestRunInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdDelete: async (testRunId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testRunId' is not null or undefined
            assertParamExists('testRunsTestRunIdDelete', 'testRunId', testRunId)
            const localVarPath = `/TestRuns/{testRunId}`
                .replace(`{${"testRunId"}}`, encodeURIComponent(String(testRunId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdGet: async (testRunId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testRunId' is not null or undefined
            assertParamExists('testRunsTestRunIdGet', 'testRunId', testRunId)
            const localVarPath = `/TestRuns/{testRunId}`
                .replace(`{${"testRunId"}}`, encodeURIComponent(String(testRunId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdPut: async (testRunId: number, createTestRunInput?: CreateTestRunInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testRunId' is not null or undefined
            assertParamExists('testRunsTestRunIdPut', 'testRunId', testRunId)
            const localVarPath = `/TestRuns/{testRunId}`
                .replace(`{${"testRunId"}}`, encodeURIComponent(String(testRunId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestRunInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestRunsApi - functional programming interface
 * @export
 */
export const TestRunsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestRunsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestRun>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunsPost(createTestRunInput?: CreateTestRunInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunsPost(createTestRunInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunsTestRunIdDelete(testRunId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunsTestRunIdDelete(testRunId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunsTestRunIdGet(testRunId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunsTestRunIdGet(testRunId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRunsTestRunIdPut(testRunId: number, createTestRunInput?: CreateTestRunInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRunsTestRunIdPut(testRunId, createTestRunInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestRunsApi - factory interface
 * @export
 */
export const TestRunsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestRunsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsGet(options?: any): AxiosPromise<Array<TestRun>> {
            return localVarFp.testRunsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsPost(createTestRunInput?: CreateTestRunInput, options?: any): AxiosPromise<TestRun> {
            return localVarFp.testRunsPost(createTestRunInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdDelete(testRunId: number, options?: any): AxiosPromise<void> {
            return localVarFp.testRunsTestRunIdDelete(testRunId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdGet(testRunId: number, options?: any): AxiosPromise<TestRun> {
            return localVarFp.testRunsTestRunIdGet(testRunId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} testRunId 
         * @param {CreateTestRunInput} [createTestRunInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRunsTestRunIdPut(testRunId: number, createTestRunInput?: CreateTestRunInput, options?: any): AxiosPromise<TestRun> {
            return localVarFp.testRunsTestRunIdPut(testRunId, createTestRunInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestRunsApi - object-oriented interface
 * @export
 * @class TestRunsApi
 * @extends {BaseAPI}
 */
export class TestRunsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    public testRunsGet(options?: AxiosRequestConfig) {
        return TestRunsApiFp(this.configuration).testRunsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTestRunInput} [createTestRunInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    public testRunsPost(createTestRunInput?: CreateTestRunInput, options?: AxiosRequestConfig) {
        return TestRunsApiFp(this.configuration).testRunsPost(createTestRunInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} testRunId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    public testRunsTestRunIdDelete(testRunId: number, options?: AxiosRequestConfig) {
        return TestRunsApiFp(this.configuration).testRunsTestRunIdDelete(testRunId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} testRunId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    public testRunsTestRunIdGet(testRunId: number, options?: AxiosRequestConfig) {
        return TestRunsApiFp(this.configuration).testRunsTestRunIdGet(testRunId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} testRunId 
     * @param {CreateTestRunInput} [createTestRunInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    public testRunsTestRunIdPut(testRunId: number, createTestRunInput?: CreateTestRunInput, options?: AxiosRequestConfig) {
        return TestRunsApiFp(this.configuration).testRunsTestRunIdPut(testRunId, createTestRunInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEmailEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('usersEmailEmailGet', 'email', email)
            const localVarPath = `/Users/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserInput} [createUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (createUserInput?: CreateUserInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserInput} [updateUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut: async (updateUserInput?: UpdateUserInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersEmailEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersEmailEmailGet(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserInput} [createUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(createUserInput?: CreateUserInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(createUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserInput} [updateUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPut(updateUserInput?: UpdateUserInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPut(updateUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersEmailEmailGet(email: string, options?: any): AxiosPromise<User> {
            return localVarFp.usersEmailEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserInput} [createUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(createUserInput?: CreateUserInput, options?: any): AxiosPromise<User> {
            return localVarFp.usersPost(createUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserInput} [updateUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(updateUserInput?: UpdateUserInput, options?: any): AxiosPromise<User> {
            return localVarFp.usersPut(updateUserInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersEmailEmailGet(email: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersEmailEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserInput} [createUserInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(createUserInput?: CreateUserInput, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPost(createUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserInput} [updateUserInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPut(updateUserInput?: UpdateUserInput, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPut(updateUserInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherForecastApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeatherForecast(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeatherForecast(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherForecastApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.getWeatherForecast(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public getWeatherForecast(options?: AxiosRequestConfig) {
        return WeatherForecastApiFp(this.configuration).getWeatherForecast(options).then((request) => request(this.axios, this.basePath));
    }
}


